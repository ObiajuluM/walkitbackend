# Generated by Django 5.1.3 on 2025-04-04 21:31

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='WalkUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True, verbose_name='UUID')),
                ('username', models.CharField(max_length=255, verbose_name='username')),
                ('display_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='display_name')),
                ('email', models.EmailField(db_index=True, max_length=254, unique=True, verbose_name='email')),
                ('gender', models.CharField(blank=True, max_length=100, null=True, verbose_name='gender')),
                ('dob', models.DateField(blank=True, null=True, verbose_name='dob')),
                ('balance', models.FloatField(default=0, verbose_name='balance')),
                ('invite_code', models.CharField(blank=True, editable=False, max_length=20, null=True, unique=True, verbose_name='invite_code')),
                ('invited_by', models.CharField(blank=True, max_length=255, null=True, verbose_name='invited_by')),
                ('long', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='long')),
                ('lat', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='lat')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Claim',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(auto_now_add=True, verbose_name='time')),
                ('steps_recorded', models.PositiveIntegerField(blank=True, null=True, verbose_name='steps_recorded')),
                ('steps_rewarded', models.PositiveIntegerField(blank=True, null=True, verbose_name='steps_rewarded')),
                ('amount_rewarded', models.FloatField(blank=True, null=True, verbose_name='amount_rewarded')),
                ('points_per_step', models.FloatField(blank=True, null=True, verbose_name='points_per_step')),
                ('walkuser', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='claims', to=settings.AUTH_USER_MODEL, verbose_name='walkuser')),
            ],
            options={
                'ordering': ['-time'],
            },
        ),
        migrations.CreateModel(
            name='StepsPerDay',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('steps', models.PositiveIntegerField(blank=True, null=True, verbose_name='steps')),
                ('time', models.DateTimeField(auto_now=True, verbose_name='time')),
                ('walkuser', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='steps_per_day', to=settings.AUTH_USER_MODEL, verbose_name='walkuser')),
            ],
        ),
    ]
